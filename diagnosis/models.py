import os
from django.utils import timezone
from django.db import models
from django.forms import ValidationError
from django.core.validators import RegexValidator
from center_detail.models import CenterDetail
from authentication.models import StaffAccount
def report_file_upload_path(instance, filename):
    # Get the file extension
    ext = filename.split('.')[-1]
    # Create new filename using bill number
    filename = f"{instance.bill.bill_number}.{ext}"
    # Return the full path
    return os.path.join('reports/', filename)
def validate_age(value):
    if value > 150:
        raise ValidationError("Age cannot exceed 150 years.")

def validate_incentive_percentage(value):
    if value > 100:
        raise ValidationError("Incentive cannot exceed 100% .")
SEX_CHOICES = [
("Male", "Male"),
("Female", "Female"),
("Others", "Others"),
]   
BILL_STATUS_CHOICES = [
    ('Fully Paid', 'Fully Paid'),
    ('Partially Paid', 'Partially Paid'),
    ('Unpaid', 'Unpaid'),
]
CATEGORY_CHOICES = [
    ('X-ray', 'X-ray'),
    ('Pathology', 'Pathology'),
    ('ECG', 'ECG'),
    ('Ultrasound', 'Ultrasound'),
]

class Doctor(models.Model):
    center_detail = models.ForeignKey(CenterDetail, on_delete=models.CASCADE, related_name="center_detail")
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    address = models.CharField(max_length=100)
    phone_number = models.CharField(max_length=15, unique=True, validators=[RegexValidator()])
    ultrasound_percentage = models.PositiveIntegerField(default=50,
       validators=[
           validate_incentive_percentage
        ]
    )

    pathology_percentage = models.PositiveIntegerField(default=50,
       validators=[
           validate_incentive_percentage
        ]
    )
    ecg_percentage = models.PositiveIntegerField(default=50,
       validators=[
           validate_incentive_percentage
        ]
    )
    xray_percentage = models.PositiveIntegerField(default=50,
        validators=[
           validate_incentive_percentage
        ]
    )
    franchise_lab_percentage = models.PositiveIntegerField(default=30,
        validators=[
           validate_incentive_percentage
        ]
    )


    def __str__(self):
        return f"{self.first_name} {self.last_name} {self.address} {self.phone_number}"


class DiagnosisType(models.Model):
    center_detail = models.ForeignKey(CenterDetail, on_delete=models.CASCADE, related_name="center_detail_diagnosis")
    name = models.CharField(max_length=255)
    category = models.CharField(choices=CATEGORY_CHOICES, max_length=50)
    price = models.IntegerField()
    def __str__(self):
        return f"{self.category} - {self.name} - {self.price} - {self.center_detail.center_name}"


class Bill(models.Model):
    bill_number = models.CharField(max_length=22, unique=True, editable=False)  # autogenerated
    date_of_test = models.DateTimeField(default=timezone.now)
    patient_name = models.CharField(max_length=60)
    patient_age = models.PositiveIntegerField(validators=[validate_age])
    patient_sex = models.CharField(choices=SEX_CHOICES, max_length=10)
    diagnosis_type = models.ForeignKey(DiagnosisType, on_delete=models.CASCADE, related_name="diagnosis_type")
    test_done_by = models.ForeignKey(StaffAccount, on_delete=models.CASCADE, related_name="test_done_by", null=True, blank=True)
    referred_by_doctor = models.ForeignKey(
        Doctor, on_delete=models.SET_NULL, null=True, blank=True, related_name="referred_patients_by_doctor"
    )
    date_of_bill = models.DateTimeField(default=timezone.now)
    bill_status = models.CharField(choices=BILL_STATUS_CHOICES, max_length=15, default='Fully Paid')
    total_amount = models.IntegerField(editable=False)  # set from diagnosis_type.price, no manual input
    paid_amount = models.IntegerField(blank=True, default=0)
    disc_by_center = models.IntegerField(default=0)
    disc_by_doctor = models.IntegerField(default=0)
    incentive_amount = models.IntegerField(editable=False, default=0)  # calculated internally
    center_detail = models.ForeignKey(CenterDetail, on_delete=models.CASCADE, related_name="center_detail_bill")

    def clean(self):
        total = int(self.diagnosis_type.price or 0)
        paid = int(self.paid_amount or 0)
        bill_status = self.bill_status
        diagnosis_type = self.diagnosis_type
        center_disc = int(self.disc_by_center or 0)
        doctor_disc = int(self.disc_by_doctor or 0)
        if not diagnosis_type:
            raise ValidationError("Diagnosis type must be selected.")
        
        else:
            if bill_status not in dict(BILL_STATUS_CHOICES):
                raise ValidationError(f"Invalid bill status: {bill_status}. Must be one of {', '.join(dict(BILL_STATUS_CHOICES).keys())}.")
            if bill_status == 'Fully Paid' and total != paid+center_disc + doctor_disc:
                raise ValidationError({
                    'paid_amount': f"Total amount ({total}) must be equal to paid ({paid}) + center discount ({center_disc}) + doctor discount ({doctor_disc}) for a fully paid bill."
                })
            if bill_status == 'Partially Paid' and total >= paid + center_disc + doctor_disc:
                raise ValidationError({
                    'paid_amount': f"Total amount ({total}) must not be greater than or equal to paid ({paid}) + center discount ({center_disc}) + doctor discount ({doctor_disc}) for a partially paid bill."
                })
            if bill_status == 'Unpaid' and (paid > 0 or center_disc > 0 or doctor_disc > 0):
                raise ValidationError({
                    'paid_amount': "For an unpaid bill, paid amount, center discount, and doctor discount must all be zero."
                })
            

    def save(self, *args, **kwargs):
        if not self.bill_number:
            now = timezone.now()
            timestamp = now.strftime('%Y%m%d%H%M%S%f')
            self.bill_number = f"LL{timestamp}"

        if self.diagnosis_type:
            self.total_amount = int(self.diagnosis_type.price)
        # Validate fields first â€” this will trigger `clean()`
        self.full_clean()

        # Calculate incentive
        total = int(self.total_amount or 0)
        print(f"price: {self.diagnosis_type.price}")
        paid = int(self.paid_amount or 0)
        center_disc = int(self.disc_by_center or 0)
        doctor_disc = int(self.disc_by_doctor or 0)
        doctor_incentive = 0
        if self.referred_by_doctor and self.diagnosis_type:
            doctor = self.referred_by_doctor
            category = self.diagnosis_type.category.lower()

            category_percentage_map = {
                'ultrasound': doctor.ultrasound_percentage,
                'pathology': doctor.pathology_percentage,
                'ecg': doctor.ecg_percentage,
                'xray': doctor.xray_percentage,
                'franchise_lab': doctor.franchise_lab_percentage,
            }

            percent = category_percentage_map.get(category, 0)
            full_incentive = (total * percent) // 100

            if total == paid or (doctor_disc == 0 and center_disc > 0):
                doctor_incentive = full_incentive
            elif doctor_disc > 0:
                doctor_incentive = full_incentive - doctor_disc
            else:
                doctor_incentive = full_incentive

        self.incentive_amount = doctor_incentive

        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"{self.bill_number} {self.patient_name} {self.patient_age} {self.patient_sex} Ref by Dr. {self.referred_by_doctor.first_name} {self.referred_by_doctor.last_name}"
    

class PatientReport(models.Model):
    bill = models.ForeignKey(Bill, on_delete=models.CASCADE, related_name="report")
    report_file = models.FileField(upload_to=report_file_upload_path, blank=False, null=False)
    center_detail = models.ForeignKey(CenterDetail, on_delete=models.CASCADE, related_name="center_detail_report")
    def __str__(self):
        return f"{self.bill.date_of_bill.strftime('%d-%m-%Y')} Report for {self.bill.patient_name} Ref by Dr. {self.bill.referred_by_doctor.first_name} {self.bill.referred_by_doctor.last_name}"

    def save(self, *args, **kwargs):
        # Only attempt to get the old file if the instance already exists
        if self.pk:
            try:
                old_file = PatientReport.objects.get(pk=self.pk).report_file
            except PatientReport.DoesNotExist:
                old_file = None
        else:
            old_file = None

        super().save(*args, **kwargs)

        # After saving, delete the old file if it's different from the new file
        if old_file and old_file != self.report_file:
            if old_file.name and os.path.isfile(old_file.path):
                try:
                    os.remove(old_file.path)
                except Exception as e:
                    print(f"Failed to delete old file: {e}")

    def clean(self):
        if not self.report_file:
            raise ValidationError("Report file cannot be empty.")
        if self.report_file.size > 8 * 1024 * 1024:
            raise ValidationError("Report file size cannot exceed 8 MB.")
        if not self.report_file.name.lower().endswith(('.pdf', '.jpg', '.jpeg', '.png')):
            raise ValidationError("Report file must be a PDF, JPG, JPEG, or PNG.")
        super().clean()

    def delete(self, *args, **kwargs):
        if self.report_file:
            self.report_file.delete(save=False)
        super().delete(*args, **kwargs)